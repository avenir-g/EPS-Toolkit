<# 
{
    "Category": 3,
    "Name": "CII Print",
    "Shortcut": "F3",
    "Info": "Generates and prints a report of on-hand CII in the Fill Queue. [Start on Fill Queue screen]"
}
#>

$dllvar = '[DllImport("user32.dll")] public static extern bool ShowWindow(int handle, int state);'
add-type -name win -member $dllvar -namespace native
[native.win]::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0)

# Set the working directory to the script's location
$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
Set-Location -Path $scriptDir

# Load variables from precheck.ps1
. .\precheck.ps1

# Check the exit code of the last command
if ($LASTEXITCODE -ne 0) {
    . .\errorHandler.ps1 $global:precheckError
    exit 1
}

# List of variables to check
$variables = @{
    "Main" = $Main
    "Clavier" = $Clavier
    "Cap2Txt" = $Cap2Txt
    "SendKeys" = $SendKeys
    "Printer" = $Printer
}

# Check if all necessary variables are defined
foreach ($var in $variables.GetEnumerator()) {
    if (-not $var.Value) {
        $errorMessage = "Error: '$($var.Key)' is not defined.`nOpen Setup [Shift + F1]"
        . ./errorHandler.ps1 $errorMessage
        exit 1
    }
}

$Prog = $Cap2Txt
if (! (ps | ? { $_.path -eq $Prog })) {
    & $Prog
    Start-sleep -Milliseconds 2000
}

Function Get-ScreenColor {
    $pos = [System.Windows.Forms.Cursor]::Position
    $bmp = New-Object System.Drawing.Bitmap(1, 1)
    $graphics = [System.Drawing.Graphics]::FromImage($bmp)
    $graphics.CopyFromScreen($pos, [System.Drawing.Point]::Empty, $bmp.Size)
    $pixel = $bmp.GetPixel(0, 0)

    return "rgb($($pixel.R), $($pixel.G), $($pixel.B))"
}

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
add-type -AssemblyName Microsoft.VisualBasic

#CHECKPOINT
Set-Clipboard " "
Start-sleep -Milliseconds 20
& $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,674,130}][Win + Shift + Alt + Q][][{MouseMoveBy,144,23}][][][ENTER]"
Start-sleep -Milliseconds 500
$Checkpoint = Get-Clipboard
if ($Checkpoint -ne "Fill") {
    Write-Host "Not Fill!"
    . .\errorHandler.ps1 "Not on Fill Queue!"
    exit
}
& $Clavier /sendkeys "[{Focus,0,*EPS/*}][][Alt + f]"
Start-sleep -Milliseconds 400
$Pixel = 2
Do {
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,608,223}]"
    Start-sleep -Milliseconds 100
    $PixelRGB = Get-ScreenColor
    if ($PixelRGB -eq "rgb(7, 157, 5)") {
        $Pixel = 1
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,608,223}][{MouseButton,L}]"
        Start-sleep -Milliseconds 200
    }
    if ($PixelRGB -eq "rgb(255, 255, 255)") {
        $Pixel = 0
    }
} Until (($Pixel -eq 1) -or ($Pixel -eq 0))
Start-sleep -Milliseconds 200

#FILTER
& $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,80,250}][{MouseButton,L}][][{MouseMoveToFocus,80,270}][{MouseButton,L}][][Ctrl + C]"
Start-sleep -Milliseconds 800
$RxCheck = (Get-Clipboard).Split("`t")[0]
if ($RxCheck.StartsWith("2") -eq $false) {
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,80,250}][{MouseButton,L}][][{MouseMoveToFocus,80,270}][{MouseButton,L}][][Ctrl + C]"
    Start-sleep -Milliseconds 800
}

#GET LIST
$data = @()
& $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,550,270}][{MouseButton,L}]"
Start-sleep -Milliseconds 100
Do {
    Set-Clipboard " "
    Start-sleep -Milliseconds 15
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][][Ctrl + C]"
    Start-sleep -Milliseconds 185
    $Rx = (Get-Clipboard).Split("`t")[0]
    $Drug = (Get-Clipboard).Split("`t")[8]
    $Fill = (Get-Clipboard).Split("`t")[9]
    
    if ($Rx.StartsWith("2")) {
        $data += @([pscustomobject]@{Rx = $Rx; Drug = $Drug; Fill = $Fill; OnHand = '*' })
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][Down]"
        Start-sleep -Milliseconds 70
    }
} Until (($Rx.StartsWith("2") -ne $true) -or ($Rx.StartsWith("4") -eq $true))
if ($data.Count -eq 0) {
    . .\errorHandler.ps1 "No CII's found! Try Again!"
    exit
}
Start-sleep -Milliseconds 600

# Calculate the number of required loops
$uniqueDrugs = $data.Drug | Select-Object -Unique
$requiredLoops = $uniqueDrugs.Count
Write-Host "Number of required loops: $requiredLoops"

#GET ONHAND
$onHandCache = @{}
$loopCount = 0
1..$data.Count | % {
    $Drug = $data[($_ - 1)].Drug
    if (-not $onHandCache.ContainsKey($Drug)) {
        Start-sleep -Milliseconds 150
        $GetOnHand1 = "[{Focus,0,*EPS/*}][Alt + I][][DOWN][][RIGHT][ENTER][{Focus,500,Package*}][]" + $Drug + "[][ENTER][][Alt + S]"
        $GetOnHand2 = "[{Focus,0,*EPS/*}][Alt + I][][DOWN][][RIGHT][ENTER][{Focus,100,Package*}][]" + $Drug + "[][ENTER][][Alt + S]"
        if ($_ -eq 1) {
            & $Clavier /sendkeys $GetOnHand1
            Start-sleep -Milliseconds 2000
        } else {
            & $Clavier /sendkeys $GetOnHand2
            Start-sleep -Milliseconds 1200
        }
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,549,631}][Win + Shift + Alt + Q][][{MouseMoveBy,129,23}][][][ENTER]"
        Start-sleep -Milliseconds 500
        $OnHand = Get-Clipboard
        $onHandCache[$Drug] = $OnHand
        $loopCount++
        
        # Check if this is the last loop
        if ($loopCount -ne $requiredLoops) {
            [System.Windows.Forms.SendKeys]::SendWait("%{r}")
        } else {
            [System.Windows.Forms.SendKeys]::SendWait("%{b}")
        }
    }
    $data[($_ - 1)].OnHand = $onHandCache[$Drug]
}

# Separate drugs into in stock and not in stock, and convert to formatted strings
$inStock = $data | Where-Object { [int]$_.OnHand -ge [int]$_.Fill }
$finalDataString = $data | Where-Object { [int]$_.OnHand -ge [int]$_.Fill } | Sort-Object Drug | Format-Table | Out-String
$notInStockString = $data | Where-Object { [int]$_.OnHand -lt [int]$_.Fill } | Sort-Object Drug | Format-Table | Out-String

# Create a new form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Data Display"
$form.Size = New-Object System.Drawing.Size(600, 400)
$form.TopMost = $true

# Position the form in the top left corner of the screen
$form.StartPosition = [System.Windows.Forms.FormStartPosition]::Manual
$form.Location = New-Object System.Drawing.Point(20, 20)

# Create a RichTextBox to display the data
$richTextBox = New-Object System.Windows.Forms.RichTextBox
$richTextBox.Multiline = $true
$richTextBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$richTextBox.Font = New-Object System.Drawing.Font("Consolas", 10)

# Combine the strings
$dataString = $finalDataString + $notInStockString
if ($inStock.Count -ne 0) {
    $dataString | Out-Printer -Name $Printer
}

# Set the text of the RichTextBox
$richTextBox.Text = $dataString

# Create a panel for buttons
$buttonPanel = New-Object System.Windows.Forms.Panel
$buttonPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
$buttonPanel.Height = 50

# Create a Cancel button
$cancelButton = New-Object System.Windows.Forms.Button
$cancelButton.Text = "Cancel"
$cancelButton.Dock = [System.Windows.Forms.DockStyle]::Left
$cancelButton.Width = 100
$cancelButton.Add_Click({
    $form.Close()
})

# Create a Print button
$printButton = New-Object System.Windows.Forms.Button
$printButton.Text = "Print Again"
$printButton.Dock = [System.Windows.Forms.DockStyle]::Right
$printButton.Width = 100
$printButton.Add_Click({
    if ($inStock.Count -eq 0) {
        . .\errorHandler.ps1 "No CII's found in stock!`nNothing to print!"
    } else {
        $dataString | Out-Printer -Name $Printer
    }
})

# Add buttons to the panel
$buttonPanel.Controls.Add($cancelButton)
$buttonPanel.Controls.Add($printButton)

# Add the RichTextBox and button panel to the form
$form.Controls.Add($richTextBox)
$form.Controls.Add($buttonPanel)

# Show the form
$form.ShowDialog()
