<#
{
    "Category": 2,
    "Name": "Transfers",
    "Shortcut": "Shift + F8",
    "Info": "Automatically process and print transfer requests when data is ready. [Begin on Transfer Screen]"
}
#>

$dllvar = '[DllImport("user32.dll")] public static extern bool ShowWindow(int handle, int state);'
add-type -name win -member $dllvar -namespace native
[native.win]::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0)

# Set the working directory to the script's location
$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
Set-Location -Path $scriptDir

# Load variables from precheck.ps1
. .\precheck.ps1

# Check the exit code of the last command
if ($LASTEXITCODE -ne 0) {
    . .\errorHandler.ps1 $global:precheckError
    exit 1
}

# List of variables to check
$variables = @{
    "Main" = $Main
    "Clavier" = $Clavier
    "Cap2Txt" = $Cap2Txt
    "SendKeys" = $SendKeys
    "Printer" = $Printer
}

# Check if all necessary variables are defined
foreach ($var in $variables.GetEnumerator()) {
    if (-not $var.Value) {
        $errorMessage = "Error: '$($var.Key)' is not defined.`nOpen Setup [Shift + F1]"
        . ./errorHandler.ps1 $errorMessage
        exit 1
    }
}

Add-Type -AssemblyName microsoft.VisualBasic
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

Function Get-ScreenColor {

        [CmdletBinding(DefaultParameterSetName='None')]

        param(
            [Parameter(
                Mandatory=$true,
                ParameterSetName="Pos"
            )]
            [Int]
            $X,
            [Parameter(
                Mandatory=$true,
                ParameterSetName="Pos"
            )]
            [Int]
            $Y
        )
    
        if ($PSCmdlet.ParameterSetName -eq 'None') {
            $pos = [System.Windows.Forms.Cursor]::Position
        } else {
            $pos = New-Object psobject
            $pos | Add-Member -MemberType NoteProperty -Name "X" -Value $X
            $pos | Add-Member -MemberType NoteProperty -Name "Y" -Value $Y
        }
        $map = [System.Drawing.Rectangle]::FromLTRB($pos.X, $pos.Y, $pos.X + 1, $pos.Y + 1)
        $bmp = New-Object System.Drawing.Bitmap(1,1)
        $graphics = [System.Drawing.Graphics]::FromImage($bmp)
        $graphics.CopyFromScreen($map.Location, [System.Drawing.Point]::Empty, $map.Size)
        $pixel = $bmp.GetPixel(0,0)
        $red = $pixel.R
        $green = $pixel.G
        $blue = $pixel.B
        $result = New-Object psobject
        if ($PSCmdlet.ParameterSetName -eq 'None') {
            $result | Add-Member -MemberType NoteProperty -Name "X" -Value $([System.Windows.Forms.Cursor]::Position).X
            $result | Add-Member -MemberType NoteProperty -Name "Y" -Value $([System.Windows.Forms.Cursor]::Position).Y
        }
        $RGB = "rgb(" + $red + ", " + $green + ", " + $blue + ")"
        return $RGB
    }

[Microsoft.VisualBasic.Interaction]::AppActivate("Enterprise")
[System.Windows.Forms.SendKeys]::SendWait("%{e}")
Start-sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{PGDN 15}")
Set-Clipboard " "
[System.Windows.Forms.SendKeys]::SendWait("^{c}")

$Verify = (Get-Clipboard).Split("`t")[4]
Write-Host $Verify

if ($Verify -ne "INCOMPLETE") {
    exit
}

[Microsoft.VisualBasic.Interaction]::AppActivate("Enterprise")
[System.Windows.Forms.SendKeys]::SendWait("%{e}")
Start-sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{PGUP 15}")
Write-host "PAGEUP"

$Transfers = (Get-Clipboard).Split("`t")[0]

#CHECK PRINT
$PixelSuccess = 0
$PixelSkip = 0
Do {
& $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,340,160}]"
Start-sleep -Milliseconds 50
$PixelRGB = Get-ScreenColor
if ($PixelRGB -eq "rgb(0, 0, 0)") {
$PixelSuccess = 1
Write-Host "Success"
}
if ($PixelRGB -eq "rgb(168, 170, 168)") {
$PixelSkip = 1
Write-Host "Skip"
}
} Until (($PixelSuccess -eq 1) -or ($PixelSkip -eq 1))

#WORKED LOOP
if ($PixelSkip -eq 1) {
    1..$Transfers | % {
    [System.Windows.Forms.SendKeys]::SendWait("^{c}")
    $Worked = (Get-Clipboard).Split("`t")[3]

    if ([String]$Worked -eq "false") {
    [System.Windows.Forms.SendKeys]::SendWait("%{e}")
    [System.Windows.Forms.SendKeys]::SendWait(" ")
    [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")

    }
    if ([String]$Worked -eq "true") {
    [System.Windows.Forms.SendKeys]::SendWait("%{e}")
    [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
    }
    }
}

#CHECK PRINT
$PixelSuccess = 0
$PixelSkip = 0

Do {
& $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,340,160}]"
Start-sleep -Milliseconds 150
$PixelRGB = Get-ScreenColor
if ($PixelRGB -eq "rgb(0, 0, 0)") {
$PixelSuccess = 1
Write-Host "Success"
}
if ($PixelRGB -eq "rgb(168, 170, 168)") {
$PixelSkip = 1
Write-Host "Skip"
}
} Until (($PixelSuccess -eq 1) -or ($PixelSkip -eq 1))

#PRINT

[Microsoft.VisualBasic.Interaction]::AppActivate("Enterprise")
[System.Windows.Forms.SendKeys]::SendWait("%{e}")
Start-sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{PGUP 15}")

if ($PixelSuccess -eq 1) {
    1..$Transfers | % {
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,400,160}][{MouseButton,L}]"
    Start-sleep -Milliseconds 200

    $TransferWindow = 0
    $timeout = New-TimeSpan -Seconds 5
    $endTime = (Get-Date).Add($timeout)
    Do {
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Rx"))) {
        Start-sleep -Milliseconds 600
        $TransferWindow = 1
        }
    } Until ($TransferWindow -eq 1 -or ((Get-Date) -gt $endTime))
    if ($TransferWindow -ne 1) { exit }
    Start-sleep -Milliseconds 400

    & $Clavier /sendkeys "[{Focus,0,Rx Transfer*}][][TAB][][TAB][][Enter][][Alt + F4]"
    Start-sleep -Milliseconds 3500
    [Microsoft.VisualBasic.Interaction]::AppActivate("Enterprise")
    [System.Windows.Forms.SendKeys]::SendWait("%{e}")
    [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
    Start-sleep -Milliseconds 200
    }
}

exit