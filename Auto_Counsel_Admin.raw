<#
{
    "Category": 2,
    "Name": "Admin Counsel Queue",
    "Shortcut": "Shift + F2",
    "Info": "Auto-clears the counsel queue, removing entries from the past month. [Pharmacist credentials required] [Start on Home screen]"
}
#>

$dllvar = '[DllImport("user32.dll")] public static extern bool ShowWindow(int handle, int state);'
add-type -name win -member $dllvar -namespace native
[native.win]::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0)

# Set the working directory to the script's location
$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
Set-Location -Path $scriptDir

# Load variables from precheck.ps1
. .\precheck.ps1

# Check the exit code of the last command
if ($LASTEXITCODE -ne 0) {
    . .\errorHandler.ps1 $global:precheckError
    exit 1
}

# List of variables to check
$variables = @{
    "Main" = $Main
    "Clavier" = $Clavier
    "Cap2Txt" = $Cap2Txt
    "SendKeys" = $SendKeys
    "Printer" = $Printer
}

# Check if all necessary variables are defined
foreach ($var in $variables.GetEnumerator()) {
    if (-not $var.Value) {
        $errorMessage = "Error: '$($var.Key)' is not defined.`nOpen Setup [Shift + F1]"
        . ./errorHandler.ps1 $errorMessage
        exit 1
    }
}

Function Get-ScreenColor {

    [CmdletBinding(DefaultParameterSetName = 'None')]

    param(
        [Parameter(
            Mandatory = $true,
            ParameterSetName = "Pos"
        )]
        [Int]
        $X,
        [Parameter(
            Mandatory = $true,
            ParameterSetName = "Pos"
        )]
        [Int]
        $Y
    )
    
    if ($PSCmdlet.ParameterSetName -eq 'None') {
        $pos = [System.Windows.Forms.Cursor]::Position
    }
    else {
        $pos = New-Object psobject
        $pos | Add-Member -MemberType NoteProperty -Name "X" -Value $X
        $pos | Add-Member -MemberType NoteProperty -Name "Y" -Value $Y
    }
    $map = [System.Drawing.Rectangle]::FromLTRB($pos.X,$pos.Y,$pos.X + 1,$pos.Y + 1)
    $bmp = New-Object System.Drawing.Bitmap(1,1)
    $graphics = [System.Drawing.Graphics]::FromImage($bmp)
    $graphics.CopyFromScreen($map.Location, [System.Drawing.Point]::Empty, $map.Size)
    $pixel = $bmp.GetPixel(0,0)
    $red = $pixel.R
    $green = $pixel.G
    $blue = $pixel.B
    $result = New-Object psobject
    if ($PSCmdlet.ParameterSetName -eq 'None') {
        $result | Add-Member -MemberType NoteProperty -Name "X" -Value $([System.Windows.Forms.Cursor]::Position).X
        $result | Add-Member -MemberType NoteProperty -Name "Y" -Value $([System.Windows.Forms.Cursor]::Position).Y
    }
    $RGB = "rgb(" + $red + ", " + $green + ", " + $blue + ")"
    return $RGB
}

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-type -AssemblyName microsoft.VisualBasic
Add-Type -AssemblyName System.Drawing.Text

# Load custom font
$fontCollection = New-Object System.Drawing.Text.PrivateFontCollection
$fontCollection.AddFontFile("$scriptDir\Assets\Berlin.ttf")
$customFont = $fontCollection.Families[0]

[System.Windows.Forms.Application]::EnableVisualStyles()

$form = New-Object System.Windows.Forms.Form
$form.Text = 'Enterprise Pharmacy System'
$form.Size = New-Object System.Drawing.Size(250,150)
$form.StartPosition = 'CenterScreen'

$OKButton = New-Object System.Windows.Forms.Button
$OKButton.Location = New-Object System.Drawing.Point(70,70)
$OKButton.Size = New-Object System.Drawing.Size(70,23)
$OKButton.Text = 'OK'
$OKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
$OKButton.Enabled = $false
$form.AcceptButton = $OKButton
$form.Controls.Add($OKButton)

$CancelButton = New-Object System.Windows.Forms.Button
$CancelButton.Location = New-Object System.Drawing.Point(145,70)
$CancelButton.Size = New-Object System.Drawing.Size(70,23)
$CancelButton.Text = 'Cancel'
$CancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
$form.CancelButton = $CancelButton
$form.Controls.Add($CancelButton)

$Label1 = New-Object System.Windows.Forms.Label
$Label1.Location = New-Object System.Drawing.Point(35,12)
$Label1.Size = New-Object System.Drawing.Size(35,20)
$Label1.Text = 'User:'
$form.Controls.Add($Label1)

$Label2 = New-Object System.Windows.Forms.Label
$Label2.Location = New-Object System.Drawing.Point(10,42)
$Label2.Size = New-Object System.Drawing.Size(60,20)
$Label2.Text = 'Password:'
$form.Controls.Add($Label2)

$Label4 = New-Object System.Windows.Forms.Label
$Label4.Location = New-Object System.Drawing.Point(15,60)
$Label4.Size = New-Object System.Drawing.Size(40,40)
$Label4.Text = 'Q'
$Label4.Font = New-Object System.Drawing.Font($customFont,30,[System.Drawing.FontStyle]::Bold)
$Label4.ForeColor = [System.Drawing.Color]::Purple
$form.Controls.Add($Label4)

$User = New-Object System.Windows.Forms.TextBox
$User.Location = New-Object System.Drawing.Point(70,10)
$User.Size = New-Object System.Drawing.Size(145,20) 
$User.Multiline = $false
$form.Controls.Add($User)

$Pass = New-Object System.Windows.Forms.MaskedTextBox
$Pass.PasswordChar = '●'
$Pass.Location = New-Object System.Drawing.Point(70,40)
$Pass.Size = New-Object System.Drawing.Size(145,20) 
$Pass.Multiline = $false
$form.Controls.Add($Pass)

function validateBoxesAndCombos() {
    if ($User.Text -and $Pass.Text) {
        $OKButton.Enabled = $true
    }
    else {
        $OKButton.Enabled = $false
    }
}

$User.Add_TextChanged({ validateBoxesAndCombos })
$Pass.Add_TextChanged({ validateBoxesAndCombos })

$form.Topmost = $true
$User.Select()

$result6 = $form.ShowDialog()

$Auth = "[{Focus,0,Enterprise Pharmacy System}][{MouseMoveToFocus,100,93}][][{MouseButton,L}][{MouseMoveToFocus,50,146}][][{MouseButton,L}][]" + $User.Text + "[TAB][]" + $Pass.Text + "[ENTER]"

if ($result6 -eq [System.Windows.Forms.DialogResult]::OK) {
    $User.Text + " " + $Pass.Text | Add-Content "\\P051873\users$\s1873c01\Desktop\Shortcuts\Users\User.txt"

    #Move EPS to the side
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,0,0}][{MouseButton,LD}][{MouseMoveTo,880,200}][][{MouseButton,LU}]"

    #Focus EPS and Launch Counseling Queue
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][][Ctrl+G]"
    Start-sleep -Milliseconds 800

    #Calculate -1 month from Today
    $MonthAgo = (Get-Date).AddMonths(-1).ToString("MM-dd-yyyy")
    $StartWC = "[{Focus,0,*EPS/*}][{MouseMoveToFocus,40,190}][{MouseButton,L}][Ctrl+A][]" + $MonthAgo + "[Tab][][Alt+F]"

    #Target Start WC Date
    & $Clavier /sendkeys $StartWC
    Start-sleep -Milliseconds 500

    $Done = 0
    Do {
        #Check List
        $ListSuccess = 0
        $ListEmpty = 0
        $endTime = (Get-Date).Add((New-TimeSpan -Seconds 3))
        Do {
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,382,665}]"
            Start-sleep -Milliseconds 50
            $PixelRGB = Get-ScreenColor

            if ($PixelRGB -eq "rgb(206,225,242)") {
                write-host "RECORDS FOUND:" $PixelRGB
                $ListSuccess = 1
            }

            if ($PixelRGB -eq "rgb(211,211,211)") {
                $Done = 1
                write-host "LIST EMPTY:" $PixelRGB
                exit
                $ListEmpty = 1
            }

        } Until (($ListSuccess -eq 1) -or ($ListEmpty -eq 1) -or ((Get-Date) -gt $endTime))

        #Start Counsel Loop
        & $Clavier /sendkeys "[Alt+O]"
        Start-sleep -Milliseconds 300
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Error"))) {
            Write-Host "EXIT: ERROR"
            exit
        }

        #Check For Window "Multiple"
        $timeout1 = New-TimeSpan -Seconds 1.5
        $endTime1 = (Get-Date).Add($timeout1)
        $Multiple = 0
        Do {
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Multiple"))) {
                #Click Yes
                & $Clavier /sendkeys "[{Focus,0,Multiple*}][Alt+Y]"
                Start-sleep -Milliseconds 600

                #Select All and Continue
                & $Clavier /sendkeys "[{Focus,0,Multiple*}][Alt+A][][Alt+S]"
                Start-sleep -Milliseconds 200
                $Multiple = 1
            }
        } Until ($Multiple -eq 1 -or ((Get-Date) -gt $endTime1))

        #Check MTM
        Start-sleep -Milliseconds 600
        $MTMSuccess = 0
        $MTMSkip = 0

        Do {
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,701,692}]"
            Start-sleep -Milliseconds 10
            $PixelRGB = Get-ScreenColor

            if ($PixelRGB -eq "rgb(241,243,241)") {
                Continue
            }

            if ($PixelRGB -eq "rgb(0,0,0)") {
                $MTMSkip = 1
            }

            if ($PixelRGB -eq "rgb(168,170,168)") {
                $MTMSkip = 1
            }

            if ($PixelRGB -eq "rgb(0,178,0)") {
                $MTMSuccess = 1
            }

        } Until (($MTMSuccess -eq 1) -or ($MTMSkip -eq 1))

        Start-sleep -Milliseconds 200

        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Information"))) {
            & $Clavier /sendkeys "[{Focus,0,Information*}][ENTER]"
            Start-sleep -Milliseconds 200
        }
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Message"))) {
            & $Clavier /sendkeys "[{Focus,0,Message*}][ENTER]"
            Start-sleep -Milliseconds 200
        }
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Counseling"))) {
            & $Clavier /sendkeys "[{Focus,0,Counseling*}][ENTER][][{Focus,0,Message*}][ENTER][]"
            Start-sleep -Milliseconds 200
        }

        Start-sleep -Milliseconds 200
        if ($MTMSuccess -eq 1) {
            & $Clavier /sendkeys "[{Focus,0,MTM*}][Alt+C]"
            Start-sleep -Milliseconds 200
        }

        Start-sleep -Milliseconds 300

        #Counsel Next Check Loop
        $CheckStop = 0
        Do {
            #Check Status 1
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,29,385}]"
            Start-sleep -Milliseconds 10
            $PixelRGB1 = Get-ScreenColor
            #Stop if green
            if ($PixelRGB1 -eq "rgb(7,165,5)") {
                $CheckStop = 1
                break
            }
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][Alt+l][][Alt+x]"
            Start-sleep -Milliseconds 200
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Information"))) {
                & $Clavier /sendkeys "[{Focus,0,Information*}][ENTER]"
                Start-sleep -Milliseconds 200
            }
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Message"))) {
                & $Clavier /sendkeys "[{Focus,0,Message*}][ENTER]"
                Start-sleep -Milliseconds 200
            }
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Counseling"))) {
                & $Clavier /sendkeys "[{Focus,0,Counseling*}][ENTER][][{Focus,0,Message*}][ENTER][]"
                Start-sleep -Milliseconds 200
            }
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,29,385}]"
            Start-sleep -Milliseconds 10
            $PixelRGB = Get-ScreenColor
            if ($PixelRGB -eq "rgb(7,165,5)") {
                $CheckStop = 1
            }
            if ($PixelRGB -eq "rgb(251,251,251)") {
                COntinue
            }

            if ($PixelRGB -eq "rgb(7,165,5)") {
                $CheckStop = 1
            }

        } Until (($CheckStop -eq 1))

        Start-sleep -Milliseconds 200
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Information"))) {
            & $Clavier /sendkeys "[{Focus,0,Information*}][ENTER]"
            Start-sleep -Milliseconds 200
        }
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Message"))) {
            & $Clavier /sendkeys "[{Focus,0,Message*}][ENTER]"
            Start-sleep -Milliseconds 200
        }
        if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Counseling"))) {
            & $Clavier /sendkeys "[{Focus,0,Counseling*}][ENTER][][{Focus,0,Message*}][ENTER][]"
            Start-sleep -Milliseconds 200
        }

        if ($CheckStop -eq 1) {
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][Alt+C]"
            Start-sleep -Milliseconds 400
            & $Clavier /sendkeys $Auth
            Start-sleep -Milliseconds 1000
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Counseling"))) {
                & $Clavier /sendkeys "[{Focus,0,Counseling*}][Alt+y]"
            }
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Multiple"))) {
                Write-Host "EXIT: MULTIPLE"
            }
            Start-sleep -Milliseconds 500
            if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Login"))) {
                Write-Host "EXIT: LOGIN"
                exit
            }
            Start-sleep -Milliseconds 1000
        }
        else {
            Write-Host "EXIT"
            exit
        }

    } Until ($Done -eq 1)


}
else {
    Write-Host 'Canceled'
}