<#
{
    "Category": 2,
    "Name": "Refill Request",
    "Info": "Auto-prints recent failed prescriber refill requests or a set number of old requests, then reschedules for 10 days. [Start on Open Call Queue]",
    "Shortcut": "Shift + F6",
    "Code": "1141",
    "Window": "Minimized",
    "Programs": "java.exe"
}
#>

$dllvar = '[DllImport("user32.dll")] public static extern bool ShowWindow(int handle, int state);'
add-type -name win -member $dllvar -namespace native
[native.win]::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0)

# Set the working directory to the script's location
$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
Set-Location -Path $scriptDir

# Load variables from precheck.ps1
. .\precheck.ps1

# Check the exit code of the last command
if ($LASTEXITCODE -ne 0) {
    . .\errorHandler.ps1 $global:precheckError
    exit 1
}

# List of variables to check
$variables = @{ 
    "Main" = $Main
    "Clavier" = $Clavier
    "Cap2Txt" = $Cap2Txt
    "SendKeys" = $SendKeys
    "Printer" = $Printer
}

# Check if all necessary variables are defined
foreach ($var in $variables.GetEnumerator()) {
    if (-not $var.Value) {
        $errorMessage = "Error: '$($var.Key)' is not defined.`nOpen Setup [Shift + F1]"
        . ./errorHandler.ps1 $errorMessage
        exit 1
    }
}

$Prog = $Cap2Txt
if (! (ps | ? { $_.path -eq $Prog })) {
    & $Prog
    Start-sleep -Milliseconds 2000
}

Function Get-ScreenColor {
    $pos = [System.Windows.Forms.Cursor]::Position
    $bmp = New-Object System.Drawing.Bitmap(1, 1)
    $graphics = [System.Drawing.Graphics]::FromImage($bmp)
    $graphics.CopyFromScreen($pos, [System.Drawing.Point]::Empty, $bmp.Size)
    $pixel = $bmp.GetPixel(0, 0)

    return "rgb($($pixel.R), $($pixel.G), $($pixel.B))"
}

#Form
Add-Type -AssemblyName PresentationFramework
Add-type -AssemblyName Microsoft.VisualBasic

# Font selection (as before)
try {
    $fontName = "Segoe UI Variable"
    $font = New-Object System.Windows.Media.FontFamily($fontName)
    $null = $font.FamilyNames
} catch { $fontName = "Segoe UI" }

$xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Enterprise Pharmacy System"
        Height="225" Width="335"
        WindowStartupLocation="CenterScreen"
        ResizeMode="NoResize"
        Background="#F5F5FA"
        FontFamily="$fontName"
        FontSize="14">

    <Grid Margin="0">
        <!-- Background R watermark -->
        <TextBlock Text="R"
                   FontSize="70"
                   FontWeight="Bold"
                   Opacity="1"
                   Foreground="#5084B43C"
                   VerticalAlignment="Bottom"
                   HorizontalAlignment="Left"
                   Margin="13,0,0,-1"
                   IsHitTestVisible="False"
                   Panel.ZIndex="0"/>
        <!-- Main content grid -->
        <Grid Margin="18,18,18,18" Panel.ZIndex="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="210"/>
            </Grid.ColumnDefinitions>

            <!-- User row -->
            <TextBlock Grid.Row="0" Grid.Column="0" Text="User" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <TextBox x:Name="UserBox" Grid.Row="0" Grid.Column="1"
                     Width="210" Height="28" BorderThickness="2" Padding="1.5,3"/>

            <!-- Password row -->
            <TextBlock Grid.Row="1" Grid.Column="0" Text="Password" VerticalAlignment="Center" Margin="0,6,5,0"/>
            <!-- Password row with reveal button -->
            <Grid Grid.Row="1" Grid.Column="1" Margin="0,6,0,0">
                <Grid>
                    <!-- Password input -->
                    <PasswordBox x:Name="PassBox"
                                 Height="28"
                                 Padding="1.5,1.5,28,1.5"
                                 VerticalContentAlignment="Center"
                                 BorderThickness="2"
                                 Margin="0"/>

                    <!-- Plain text password (for reveal) -->
                    <TextBox x:Name="PassText"
                             Height="28"
                             Padding="1.5,1.5,28,1.5"
                             VerticalContentAlignment="Center"
                             BorderThickness="2"
                             Margin="0"
                             Visibility="Collapsed"/>

                    <!-- Reveal button overlay -->
                    <Button x:Name="TogglePassBtn"
                            Content="👁"
                            Width="24"
                            Height="24"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Margin="0,0,2,0"
                            Background="Transparent"
                            BorderBrush="{x:Null}"
                            BorderThickness="0"
                            ToolTip="Hold to reveal password"
                            IsTabStop="False"
                            Cursor="Hand"/>
                </Grid>
            </Grid>

            <TextBlock Grid.Row="2" Grid.Column="0" Text="Refills" VerticalAlignment="Center" Margin="0,6,5,0"/>
            <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal" Margin="0,6,0,0">
                <TextBox x:Name="RefillBox"
                         Width="77" Height="28"
                         BorderThickness="2" Padding="1.5,3"/>
                <TextBlock Text="Failed Only?"
                           Width="83"
                           Margin="10,0,0,0"
                           VerticalAlignment="Center"/>
                <ToggleButton x:Name="FailedToggle"
                              Width="40"
                              Height="22"
                              Margin="0"
                              VerticalAlignment="Center">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid>
                                            <Border x:Name="SwitchBorder"
                                                    CornerRadius="11"
                                                    Background="#d5d5d5"
                                                    BorderBrush="#333"
                                                    BorderThickness="0"/>
                                            <Ellipse x:Name="SwitchKnob"
                                                     Width="15" Height="15"
                                                     Fill="#333"
                                                     HorizontalAlignment="Left"
                                                     Margin="4,0"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="SwitchBorder" Property="Background" Value="#569de5"/>
                                                <Setter TargetName="SwitchKnob" Property="Fill" Value="White"/>
                                                <Setter TargetName="SwitchKnob" Property="HorizontalAlignment" Value="Right"/>
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="False">
                                                <Setter TargetName="SwitchKnob" Property="HorizontalAlignment" Value="Left"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
            </StackPanel>

            <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal" Margin="0,15,0,0">
                <Button x:Name="OkBtn"
                        Content="Submit"
                        Width="102"
                        Height="36"
                        FontWeight="Bold"
                        IsEnabled="False">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="#569de5"/>
                            <Setter Property="BorderThickness" Value="2"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="3">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#4d8dce"/>
                                            </Trigger>
                                            <Trigger Property="IsFocused" Value="True">
                                                <Setter Property="Background" Value="#4d8dce"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="BorderBrush" Value="#aaa"/>
                                                <Setter Property="Background" Value="#ddd"/>
                                                <Setter Property="Foreground" Value="white"/>
                                                <Setter Property="Cursor" Value="Arrow"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="True">
                                                <Setter Property="BorderThickness" Value="0"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                </Button>

                <Button x:Name="CancelBtn"
                        Content="Cancel"
                        Width="102"
                        Height="36"
                        FontWeight="Bold"
                        BorderBrush="#888"
                        Margin="6,0,0,0"
                        HorizontalAlignment="Right">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Background" Value="#c84e38"/>
                            <Setter Property="Foreground" Value="white"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#C23B22"/>
                                            </Trigger>
                                            <Trigger Property="IsFocused" Value="True">
                                                <Setter Property="Background" Value="#C23B22"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                </Button>
            </StackPanel>

            <TextBlock x:Name="ErrorBlock"
                       Grid.Row="4" Grid.ColumnSpan="2"
                       Foreground="Red"
                       Margin="0,8,0,0"
                       FontSize="12"
                       Visibility="Collapsed"/>
        </Grid>
    </Grid>
</Window>
"@

# Parse and show window
$reader = New-Object System.IO.StringReader $xaml
$xmlreader = [System.Xml.XmlTextReader]::new($reader)
$window = [Windows.Markup.XamlReader]::Load($xmlreader)

# Find controls
$UserBox     = $window.FindName("UserBox")
$PassBox     = $window.FindName("PassBox")
$RefillBox   = $window.FindName("RefillBox")
$FailedToggle = $window.FindName("FailedToggle")
$OkBtn       = $window.FindName("OkBtn")
$CancelBtn   = $window.FindName("CancelBtn")
$ErrorBlock  = $window.FindName("ErrorBlock")

# Validation Logic
function Validate-Inputs {

    if ($UserBox.Text -and $PassBox.Password -and ($RefillBox.Text -or $FailedToggle.IsChecked)) {
        $OkBtn.IsEnabled = $true
        $ErrorBlock.Visibility = "Collapsed"
    } else {
        $OkBtn.IsEnabled = $false
    }
}

$UserBox.Add_TextChanged({ Validate-Inputs })
$PassBox.Add_PasswordChanged({ Validate-Inputs })
$RefillBox.Add_TextChanged({
    if ($RefillBox.Text -match "\D") {
        $RefillBox.Text = $RefillBox.Text -replace "\D"
        $RefillBox.CaretIndex = $RefillBox.Text.Length
    }
    Validate-Inputs
})

$FailedToggle.Add_Checked({
    $RefillBox.IsEnabled = $false
    Validate-Inputs
})

$FailedToggle.Add_Unchecked({
    $RefillBox.IsEnabled = $true
    Validate-Inputs
})

$CancelBtn.Add_Click({ $window.DialogResult = $false; $window.Close() })
$OkBtn.Add_Click({
    $window.DialogResult = $true
    $window.Close()
})

$PassText = $window.FindName("PassText")
$TogglePassBtn = $window.FindName("TogglePassBtn")
$TogglePassBtn.Add_PreviewMouseLeftButtonDown({
    $PassText.Text = $PassBox.Password
    $PassBox.Visibility = "Collapsed"
    $PassText.Visibility = "Visible"
})
$TogglePassBtn.Add_PreviewMouseLeftButtonUp({
    $PassBox.Password = $PassText.Text
    $PassBox.Visibility = "Visible"
    $PassText.Visibility = "Collapsed"
})

$UserBox.Add_GotFocus({ $UserBox.Dispatcher.InvokeAsync({ $UserBox.SelectAll() }, "Background") })
$PassBox.Add_GotFocus({ $PassBox.Dispatcher.InvokeAsync({ $PassBox.SelectAll() }, "Background") })
$PassText.Add_GotFocus({ $PassText.Dispatcher.InvokeAsync({ $PassText.SelectAll() }, "Background") })
$RefillBox.Add_GotFocus({ $RefillBox.Dispatcher.InvokeAsync({ $RefillBox.SelectAll() }, "Background") })

$window.Topmost = $true

$window.Add_ContentRendered({
    $window.Activate()
    [Microsoft.VisualBasic.Interaction]::AppActivate("Enterprise Pharmacy System")
    $UserBox.Focus()
})

$result = $window.ShowDialog()

if ($result -eq $true) {
    $Counter = 0
    #CHECKPOINT: QUEUE
    Set-Clipboard " "
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,418,175}][Win + Shift + Alt + Q][][{MouseMoveBy,154,23}][][][ENTER]"
    Start-sleep -Milliseconds 500
    $Checkpoint = Get-Clipboard

    if ($Checkpoint -ne "Prescriber") {
        . ./errorHandler.ps1 "Not on [Prescriber] Open Call Queue!`n[Ctrl + O]`nSelect [Prescriber] Call Type`nClick [Filter]"
        exit
    }

    $Auth = "[{Focus,0,Enterprise Pharmacy System}][{MouseMoveToFocus,100,93}][{MouseButton,L}][][{MouseMoveToFocus,50,146}][{MouseButton,L}][]" + $UserBox.Text + "[TAB][]" + $PassBox.Password + "[ENTER]"

    #FILTER

    if ($FailedToggle.IsChecked -eq $true) {
        $Queue = 500

        #Calculate -2 weeks from Today
        $2weeks = (Get-Date).AddDays(-14)

        #Sort Queue by most recent date
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,800,230}][{MouseButton,L}][][{MouseMoveToFocus,800,250}][{MouseButton,L}][][Ctrl + C]"
        Start-sleep -Milliseconds 400
        $CallDate = [datetime]::parseexact((Get-Clipboard).Split("`t")[9].Substring(0,10), 'yyyy-MM-dd', $null)

        if ($CallDate -lt $2weeks) {
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,800,230}][{MouseButton,L}][][{MouseMoveToFocus,800,250}][{MouseButton,L}]"
            Start-sleep -Milliseconds 400
        }
    }

    if ($FailedToggle.IsChecked -eq $false) {
        $Queue = $RefillBox.Text
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,900,230}][{MouseButton,L}][][{MouseMoveToFocus,900,250}][{MouseButton,L}][][Ctrl + C]"
        Start-sleep -Milliseconds 300
        $RxDate1 = (Get-Clipboard).Split("`t")[10].Split(" ")[0]
        Start-sleep -Milliseconds 50
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,900,230}][{MouseButton,L}][][{MouseMoveToFocus,900,250}][{MouseButton,L}][][Ctrl + C]"
        Start-sleep -Milliseconds 300
        $RxDate2 = (Get-Clipboard).Split("`t")[10].Split(" ")[0]
        Start-sleep -Milliseconds 50
        if ($RxDate2 -gt $RxDate1) {
            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,900,230}][{MouseButton,L}][][{MouseMoveToFocus,900,250}][{MouseButton,L}]"
            Start-sleep -Milliseconds 400
        }
    }
    Start-sleep -Milliseconds 400

    #MAIN LOOP
    $Counter = 1
    Write-Host $Counter $Queue

    Do {
        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,150,250}][][{MouseButton,L}][][Ctrl + C]"
        Start-sleep -Milliseconds 200
        $timeout = New-TimeSpan -Seconds 35
        $endTime = (Get-Date).Add($timeout)
        $result = 0
        $PreviousRx = ""
        do {
            Set-Clipboard -Value " "
            [System.Windows.Forms.SendKeys]::SendWait("^c")
            Start-sleep -Milliseconds 150
            $CurrentRx = (Get-Clipboard).Split("`t")[0,2]
            Write-Host "[BEFORE] Current: $CurrentRx | Previous: $PreviousRx"
            if ([string]$CurrentRx -eq [string]$PreviousRx) { 
                # Display success message
                . ./successHandler.ps1 "No more calls found!`nPrinted $CounterDone call(s)!"
                exit
            }
            $PreviousRx = $CurrentRx

            $TaskRx = (Get-Clipboard).Split("`t")[5]
            $StatusRx = (Get-Clipboard).Split("`t")[7]

            if ($FailedToggle.IsChecked -eq $true) {
                if ([String]$TaskRx -eq "Refill Request") {
                    if ([String]$StatusRx -match "Failed") {
                        [System.Windows.Forms.SendKeys]::SendWait("%{s}")
                        Start-sleep -Milliseconds 800
                        & $SendKeys Error " "
                        if ($? -eq $true) {
                            Start-sleep -Milliseconds 100
                            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,500,190}][{MouseButton,L}][][{MouseButton,L}][][][TAB][][][TAB][][Down]"
                            Start-sleep -Milliseconds 700
                            $result = 0
                        }
                        if ($? -eq $false) {
                            $result = 1
                        }
                    }
                    else {
                        [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
                        $result = 0
                    }
                }

                if ([String]$TaskRx -ne "Refill Request") {
                    [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
                    $result = 0
                }
            }
            if ($FailedToggle.IsChecked -eq $false) {
                if ([String]$TaskRx -eq "Refill Request") {
                    [System.Windows.Forms.SendKeys]::SendWait("%{s}")
                    Start-sleep -Milliseconds 800
                    & $SendKeys Error " "
                    if ($? -eq $true) {
                        Start-sleep -Milliseconds 100
                        & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,500,190}][{MouseButton,L}][][{MouseButton,L}][][][TAB][][][TAB][][][DOWN]"
                        Start-sleep -Milliseconds 500
                        $result = 0
                        continue
                    }
                    else {
                        $result = 1
                    }
                }

                if ([String]$TaskRx -ne "Refill Request") {
                    [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
                    $result = 0
                }
            }
        } until ($result -eq 1 -or ((Get-Date) -gt $endTime))

        if ($result -ne 1) {
            exit
        }

        if ($result -eq 1) {
            #CHECKPOINT: NOTES
            $timeout2 = New-TimeSpan -Seconds 2.5
            $endTime2 = (Get-Date).Add($timeout2)
            $Notes = 0
            Do {
                if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Call"))) {
                    & $Clavier /sendkeys "[{Focus,0,Call*}][ENTER]"
                    Start-sleep -Milliseconds 200
                    $Notes = 1
                }
            } Until ($Notes -eq 1 -or ((Get-Date) -gt $endTime2))
            Start-sleep -Milliseconds 200

            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][][{MouseMoveToFocus,700,620}][{MouseButton,L}][][{MouseMoveToFocus,250,620}][{MouseButton,L}][]"
            Start-sleep -Milliseconds 400

            [System.Windows.Forms.SendKeys]::SendWait("%{y}")
            Start-sleep -Milliseconds 200

            $Log = 0
            $timeout3 = New-TimeSpan -Seconds 6
            $endTime3 = (Get-Date).Add($timeout3)
            Do {
                if (-not ([Microsoft.VisualBasic.Interaction]::AppActivate("Log"))) {
                    Start-sleep -Milliseconds 600
                    $Log = 1
                }
            } Until ($Log -eq 1 -or ((Get-Date) -gt $endTime3))
            Start-sleep -Milliseconds 600

            if ($Log -eq 0) { exit }

            $Today = Get-Date -Format "MM/dd/yyyy"
            $LDAP = $UserBox.Text.SubString(0,2)
            $CB = "Fax sent on " + $Today + " [" + $LDAP + "]" | Set-Clipboard
            $Date = (Get-date).AddDays(10).ToString("MM-dd-yyyy")
            $LogSchedule = '[{Focus,0,Log*}][]DR[TAB][][Ctrl + v][][TAB][]' + $Date + '[TAB][]1P[TAB][][Alt + s][][{Focus,250,*EPS/*}][][Alt + c]'
            & $Clavier /sendkeys $LogSchedule
            Start-sleep -Milliseconds 2100
            & $Clavier /sendkeys $Auth
            Start-sleep -Milliseconds 1000
    
            #CHECKPOINT: RESET
            $ResetSuccess = 0
            $timeout4 = New-TimeSpan -Seconds 8
            $endTime4 = (Get-Date).Add($timeout4)

            Do {
                & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,200,100}]"
                Start-sleep -Milliseconds 50
                $PixelRGB2 = Get-ScreenColor
                if ($PixelRGB2 -eq "rgb(109, 157, 199)") {
                    $ResetSuccess = 1
                }

                if ($PixelRGB2 -ne "rgb(109, 157, 199)") {
                }

            } Until (($ResetSuccess -eq 1) -or ((Get-Date) -gt $endTime4))

            if ($ResetSuccess -eq 0) { exit }

            & $Clavier /sendkeys "[{Focus,0,*EPS/*}][][Alt + g]"
            Start-sleep -Milliseconds 2000
            Write-Host "Loop #$Counter"
            $Counter++
            $CounterDone ++
        }

    } Until ($Counter -gt $Queue)
    # Display success message
    . ./successHandler.ps1 "All Done!`nPrinted $CounterDone call(s)!"
} else {
}


