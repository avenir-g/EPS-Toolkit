$dllvar = '[DllImport("user32.dll")] public static extern bool ShowWindow(int handle, int state);'
add-type -name win -member $dllvar -namespace native
[native.win]::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0)

# Set the working directory to the script's location
$scriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
Set-Location -Path $scriptDir

# Check for today's .info file
$today = Get-Date -Format "yyyyMMdd"
$infoFilePath = "$today.info"

if (-Not (Test-Path $infoFilePath)) {
    # Load variables from precheck.ps1
    . .\precheck.ps1

    # Check the exit code of the last command
    if ($LASTEXITCODE -ne 0) {
        . .\errorHandler.ps1 $global:precheckError
        exit 1
    }
}

# List of variables to check
$variables = @{
    "Main" = $Main
    "Clavier" = $Clavier
    "Cap2Txt" = $Cap2Txt
    "SendKeys" = $SendKeys
    "Printer" = $Printer
}

# Check if all necessary variables are defined
foreach ($var in $variables.GetEnumerator()) {
    if (-not $var.Value) {
        $errorMessage = "Error: '$($var.Key)' is not defined.`nOpen Setup [Shift + F1]"
        . ./errorHandler.ps1 $errorMessage
        exit 1
    }
}

Add-Type -AssemblyName System.Windows.Forms

& $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,620,140}][{MouseButton,L}][]"
Start-sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")
[System.Windows.Forms.SendKeys]::SendWait("{PGUP 2}")

$Total = 0
$Checked = 0
$Required = 0
$PreviousRx = ""
$done = $false

Do {
[System.Windows.Forms.SendKeys]::SendWait("^c")
$CurrentRxStatus = (Get-Clipboard).Split("`t")[13]
$CurrentRxNumber = (Get-Clipboard).Split("`t")[0]
$CurrentRx = (Get-Clipboard).Split("`t")[0,4,5]

if ([string]$PreviousRx -eq $CurrentRx) {
$done = $true
break
}

if ([string]$CurrentRxStatus -eq "Will Call") {
    $Checked++
    & $Clavier /sendkeys "[{Focus,0,*EPS/*}][{MouseMoveToFocus,620,140}][{MouseButton,L}][]"
    & $SendKeys Enterprise $CurrentRxNumber
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}{TAB}")
}

$Total++
$PreviousRx = $CurrentRx
Write-Host "$Total $CurrentRx"

[System.Windows.Forms.SendKeys]::SendWait("{DOWN}")
} Until ($done)

Write-Host "Total: $Total"
Write-Host "Checked: $Checked"